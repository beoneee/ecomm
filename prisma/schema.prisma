// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Coupon{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  couponCode String
  expiryDate DateTime
  isActive Boolean

  user     User @relation(fields: [userId], references: [vendorId],   onDelete: Cascade, onUpdate: Cascade)
  vendorId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Banner{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  link String
  imageUrl String
  isActive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String?   
  isActive  Boolean
  products  Product[] 
  trainings  Training[]

  marketIds String[] @db.ObjectId
  markets   Market[]   @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String     
  slug        String   @unique
  logoUrl  String?
  description String?
  isActive  Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    
  slug       String @unique
  imageUrl  String?
  description String?   
  isActive  Boolean
  isWholesale Boolean
  sku       String?
  barcode    String?
  productCode  String?
  unit     String?
  productPrice  Float
  salePrice    Float
  wholesalePrice   Float?
  wholesaleQty    Int?
  productStock    Int?
  qty   Int?
  tags        String[]

  category   Category  @relation(fields: [categoryId], references: [id] , onDelete: Cascade, onUpdate: Cascade)
  categoryId String @db.ObjectId

  user User @relation(fields: [userId], references: [id],   onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  orderItems OrderItem[]
  sales      Sale[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}




model Training{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    
  slug       String @unique
  imageUrl  String?
  description String?  
  content String? 
  isActive  Boolean

  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
  
enum UserRole{
  ADMIN
  USER
  FARMER
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
   id        String    @id @default(auto()) @map("_id") @db.ObjectId
   name      String?
   email     String? @unique
   password  String
   emailVerified Boolean @default(false)
   products Product[]
   coupons  Coupon[]
   role   UserRole @default(USER)
   verificationToken  String?
   farmerProfile  FarmerProfile?
   profile        UserProfile?
   order         Order[]
   createdAt DateTime @default(now())
   updatedAt  DateTime? @updatedAt
   sales      Sale[]

}

model UserProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  // Add other fields for user onboarding information
  // For example:
  dateOfBirth DateTime?
  address    String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model FarmerProfile{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  code String
  contactPerson String?
  contactPersonPhone String?
  profileImageUrl String?
  email String
  name  String
  notes String?
  phone String
  physicalAddress String?
  terms  String?
  isActive Boolean
  products String[]
  landSize  Float
  mainCrop String
  
  user User @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId @unique

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}


model Order {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  firstName      String
  lastName       String
  email          String
  phone          String
  streetAddress  String
  city           String
  country        String
  district        String
  shippingCost   Float
  orderNumber     String?
  paymentMethod  String
  orderItems     OrderItem[]
  orderStatus    OrderStatus @default(PROCESSING) 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User        @relation(fields: [userId], references: [id])
  sales          Sale[]
}


model OrderItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String    @db.ObjectId
  productId   String    @db.ObjectId
  vendorId    String    @db.ObjectId
  imageUrl    String?
  title       String?    
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
}

model Sale {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  vendorId  String   @db.ObjectId
  total     Float
  productTitle    String
  productImage    String
  productPrice    Float
  productQty      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  vendor    User   @relation(fields: [vendorId], references: [id])
}


